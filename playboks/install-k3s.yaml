---
- name: Install K3S
  hosts: nodes
  tasks:
    - name: Update & Upgrade packages
      become: yes
      ansible.builtin.apt:
        name: "*"
        state: latest
        update_cache: yes
        autoremove: yes
        autoclean: yes

    - name: Set hostnames
      become: yes
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Add nodes at the bottom of /etc/hosts file
      become: yes
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          {% for host in groups['nodes'] %}
          {{ hostvars[host].ansible_host }} {{ host }}
          {% endfor %}
        marker: "# ANSIBLE MANAGED BLOCK K3S NODES"
        when: "'ansible_host' in hostvars[inventory_hostname]"

    - name: Copy config.yaml.jinja2 to /etc/rancher/k3s/
      become: yes
      ansible.builtin.template:
        src: templates/config.yaml.jinja2
        dest: /etc/rancher/k3s/config.yaml
        mode: 0644
      vars:
        host: "{{ groups['root_node'][0].ansible_host }}"

    - name: initiate K3S cluster on the root node
      become: yes
      ansible.builtin.shell: curl -sfL https://get.k3s.io | K3S_TOKEN=k3s-token sh -s - server --cluster-init --no-deploy traefik
      when: "'root_node' in group_names and inventory_hostname == groups['root_node'][0]"

    - name: Add additional master nodes to the cluster
      become: yes
      ansible.builtin.shell: curl -sfL https://get.k3s.io | K3S_TOKEN=k3s-token

    - name: Wait Until K3s service started
      become: yes
      ansible.builtin.wait_for:
        port: 6443
        delay: 10
        timeout: 300

    - name: Edit config.yaml to add additional configurations
      become: yes
      ansible.builtin.template:
        src: templates/config.yaml.jinja2
        dest: /etc/rancher/k3s/config.yaml
        mode: 0644
      vars:
        host: "{{ ansible_host }}"

    - name: Restart K3s service
      become: yes
      ansible.builtin.systemd:
        name: k3s
        state: restarted
        enabled: yes

    - name: Create .kube directory on the root node
      become: yes
      ansible.builtin.file:
        path: "{{ ansible_facts['env']['HOME'] }}/.kube"
        state: directory
        mode: 0755
      when: "'root_node' in group_names and inventory_hostname == groups['root_node'][0]"

    - name: Copy kubeconfig to .kube directory
      become: yes
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ ansible_facts['env']['HOME'] }}/.kube/config"
        remote_src: yes
        mode: 0600
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: "'root_node' in group_names and inventory_hostname == groups['root_node'][0]"

    - name: Export KUBECONFIG environment variable
      become: yes
      ansible.builtin.shell: export KUBECONFIG={{ ansible_facts['env']['HOME'] }}/.kube/config
      when: "'root_node' in group_names and inventory_hostname == groups['root_node'][0]"


    - name: Check access to the cluster from root node
      become: yes
      ansible.builtin.shell: kubectl get nodes
      when: "'root_node' in group_names and inventory_hostname == groups['root_node'][0]"
      failed_when: false

    - name: Install auto-completion on the root node
      ansible.builtin.apt:
        name: bash-completion
        state: present
      when: "'root_node' in group_names and inventory_hostname == groups['root_node'][0]"

    - name: Add bash-completion to the .bashrc file
      become: yes
      ansible.builtin.blockinfile:
        path: "{{ ansible_facts['env']['HOME'] }}/.bashrc"
        block: |
          source <(kubectl completion bash)
        marker: "# ANSIBLE MANAGED BLOCK FOR AUTO-COMPLETION"
        when: "'root_node' in group_names and inventory_hostname == groups['root_node'][0]"
